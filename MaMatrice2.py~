# -*- coding: utf-8 -*-
from Tkinter import *
from time import *
import matrice
n = 0 # Initialisation de la taille de la matrice (Variable globale )


def recherchepivot(k,A):
    i = k
    while i != n and A[i][k] == 0:
        i+=1
    if i != n:
        return i
    else:
        return -1

def permutation(i0,i,A,b):
    A[i],A[i0] = A[i0],A[i]
    b[i],b[i0] = b[i0],b[i]
    return A,b

def elimination(k,A,b):
    i=k+1
    while i < n:
        r = A[i][k]/A[k][k]        
        b[i] -= r*b[k]
        j=k
        while j < n:
            A[i][j] -= r*A[k][j]
            j+=1
        i+=1    
    return A,b

def remonte(A,b):
    x = []
    i = 0
    while i<n:
        x.append(0)
        i+=1        
    x[n-1] = b[n-1]/A[n-1][n-1]
    i = n-2
    while i>=0:    
        x[i] = b[i]            
        j = i+1
        while j<n:
            x[i] -= A[i][j]*x[j]
            j+=1            
        x[i]/=A[i][i]
        i-=1
    return x
    
def somme(A, B):
	if(B.m!=A.m):
		return 0
		if(B.n!=A.n):
			return 0
		C=[]
		j=0
		for i in range(m):
			c=[]
			for j in range(n):
				c.append(0)
			C.append(c)
		for i in range(m):
			C[i][j]=0
			for j in range(n):
				C[i][j]=A.C[i][j]+B.C[i][j]
		return C


def produit(A, B):
        C=[]
        j=0
        for i in range(m):
            c=[]
            for j in range(n):
                c.append(0)
            C.append(c)
        if(A.n!=B.m):
            return 0
        for i in range(A.m):
            for j in range(B.n):
                C[i][j]=0
                for k in range(A.n):
                    C[i][j]=C[i][j]+A.C[i][k]*B.C[k][j]

        return C 
# Interface Graphique (classe)
class Graphique:   
    def __init__ (self):
      self.fen=Tk()
      self.fen.title("Calcul Matriciel")
      self.fen.geometry("700x700")
      self.fen.resizable(True, False)
		
		#L'entete
      self.f0 = Frame(self.fen, bg ='#80c0c0', bd =5, relief =RAISED)
      self.f0.pack(side=TOP)
      self.Entete=Label(self.f0,text='Ecole Supérieure Polytechnique de Dakar\nSerigne Fallou Ndiaye DIC1-TR 2015\nPROGRAMME DE CALCUL MATRICIEL', width=100, height=5, bd=5, relief=RAISED, bg='white',font=('Helvetica', 10))
      self.Entete.pack()
      self.f0_1=Frame(self.fen,bg ='green', bd =2, relief =GROOVE)
      self.f0_1.grid(row=1,column=3)
		
		
		
		# Les interfaces des saisies et des affichages a droite
      self.f2 = Frame(self.fen, bg ='cyan', bd =2, relief =GROOVE)
      self.f2.pack(side =RIGHT, padx =5, pady =5)
      self.f2_1=Frame(self.f2, bg ='white', bd =2, relief =GROOVE)
      self.f2_1.grid(row=1,column=1)
      self.n = IntVar()
      self.n.set(1)
      self.lab2=Label(self.f2_1,text="Taille Matrice:",bg='white').grid(row=1,column=4)
      self.Entree2=Entry(self.f2_1,width=5,textvariable=self.n,font="arial 13", justify=CENTER).grid(row=1,column=5)
      self.butt2=Button(self.f2_1, text='OK',bd=2, relief=RAISED,  bg ='royal blue', width=3, overrelief=RIDGE,command=self.matrixLen)
      self.butt2.grid(row=1,column=6,padx=4)
    
	  # zone saisie matrice 1
      self.f2_2=Frame(self.f2, bg ='white', bd =2, relief =GROOVE)
      self.f2_2.grid(row=2,column=1)
      Label(self.f2_2,text="Matrice A", bg ='cyan').pack(pady=5)
      self.matrixWindows1 = Frame(self.f2_2, width =350, height =200, bg ='white', bd =2, relief =SOLID)
      self.matrixWindows1.pack()
       # zone saisie matrice 2
      self.f2_3=Frame(self.f2, bg ='white', bd =2, relief =GROOVE)
      self.f2_3.grid(row=3,column=1)
      Label(self.f2_2,text="Matrice B",bg ='cyan').pack(pady=5)
      self.matrixWindows2 = Frame(self.f2_3, width =350, height =200, bg ='white', bd =2, relief =SOLID)
      self.matrixWindows2.pack()
      
	
	 # footer
      self.footer = Frame(self.f2, bg ='white', bd =2, relief =GROOVE)
      self.footer.grid(row=4,column=1)
      footerText = "Zone Résultat"
      self.footerLabel = Label(self.footer, text=footerText, font="arial 10", fg="black", bg="white",
              width=55)
      self.footerLabel.grid(row=0, column=0)
		
      self.fen.mainloop()
       
       
       ##### Les methodes de la classe ###
         
    def matrixLen(self):
		self.footerText = " Entrer les éléments de la Matrice"
		color = "blue"
		try:
			global n1
			n1 = int(self.n.get())
		
			if n.get() == 0 :
				self.footerText = "* Veuillez donner des valeurs non nulles"
			else :
				build2Matrix()
		except:
			self.footerText = "* Les valeurs données doivent être des entiers"
			color = "red"
			# affichage message
		self.footerLabel.config(text= self.footerText, fg=color)
 
    
    def build2Matrix(self):
        # matrice A    
        self.caseA = []
        for i in range(n*n):
            self.elementMatriceAi = IntVar()
            self.elementMatriceAi.set(0)
            # convert to string because backspace deal with string
            self.caseA[i] = Entry(self.matrixWindows1, textvariable=self.elementMatriceAi, bg ='white', font=("arial", 10), width=3)
            self.caseA[i].grid(row=int(i/n), column=1+i%n)
        # creation des parenthèses  def solveEquation(self):
        # eval matrix elements
        A = []
        b = []
        for i in range(n):
            error = "ERREURS !"  
            # adding vector b elem
            try:            
                if self.caseB[i]["text"] == "X":
                    error += "\n * Remplacer les X par des nombres"     
                    self.footerLabel.config(text=error, fg="red", font="arial 10")                    
                    return 0  # stopping programm
                b.append(eval(self.caseB[i]["text"]))
            except:
                error += "\n * Tous les éléments de la matrice doivent être des nombres" 
                self.footerLabel.config(text=error, fg="red", font="arial 10")                
                return 0  # stopping programm
            # adding matrix A elem   
            A.append([])
            for j in range(n):
                try:
                    if self.caseA[i*n+j]["text"] == "X":
                        error += "\n * Remplacer les X par des nombres"     
                        self.footerLabel.config(text=error, fg="red", font="arial 10")                    
                        return 0  # stopping programm
                    A[i].append(eval(self.caseA[i*n+j]["text"]))
                except:
                    error += "\n * Tous les éléments de la matrice doivent être des nombres"
                    self.footerLabel.config(text=error, fg="red", font="arial 10")                  
                    return 0  # stopping programm
        bracket1 = Canvas(self.matrixWindows1, bg ='white', width=10*n, height=30*n)
        bracket1.create_text(5*n, 13*n, anchor=CENTER, text="(", font=("Calibri Light", 18*n))
        bracket1.grid(row=0, column=0, rowspan=n)
        #
        bracket2 = Canvas(self.matrixWindows1,bg ='white', width=10*n, height=30*n)
        bracket2.create_text(5*n, 13*n, anchor=CENTER, text=")", font=("Calibri Light", 18*n))
        bracket2.grid(row=0, column=n+1, rowspan=n)
        Button(self.matrixWindows1,text="valider",command=self.getMatriceA).grid(row=n+1,column=n+1)
        
        # vecteur b
        self.caseB = []
        for i in range(n):
			self.elementMatriceBi = IntVar()
			self.elementMatriceBi.set(0)
			self.caseB[i] = Entry(self.matrixWindows1, textvariable=self.elementMatriceBi, bg ='white', font=("arial", 10), width=3)
			self.caseB[i].grid(row=i, column=n+7)
        #
        bracket6 = Canvas(self.matrixWindows, width=10*n, height=30*n)
        bracket6.create_text(5*n, 13*n, anchor=CENTER, text=")", font=("Calibri Light", 24*n))
        bracket6.grid(row=0, column=n+8, rowspan=n)
        # solve button
        Button(self.footer, text="Résoudre", height=2, bg="royal blue", fg="white",
               font=("Arial", 10, "bold"), command=self.gauss).grid(row=0, column=1)
        #
        bracket2 = Canvas(self.matrixWindows2,bg ='white', width=10*n, height=30*n)
        bracket2.create_text(5*n, 13*n, anchor=CENTER, text=")", font=("Calibri Light", 18*n))
        bracket2.grid(row=0, column=n+1, rowspan=n)
        Button(self.matrixWindows2,text="valider",command=self.getMatriceB).grid(row=n+1,column=n+1)   
        
             
    #
    def getMatriceA(self):
        self.n=n
        self.C=[]
        z=0
        for i in range(n):
            c=[]
            for j in range(n):
                c.append(0)
            self.C.append(c)
            
        for i in range(self.n):
            for j in range(self.n):
                try:
                    self.C[i][j]=int(self.caseA[z].get())
                    z+=1
                except:
                    print("erreur sur la saisi ressayer")
        print(self.C)
        return self.C
        
	    #
    def getMatriceB(self):
        self.n=n
        self.C=[]
        for i in range(n):
			self.C[i]=int(self.caseB[i].get())
        print(self.C)
        return self.C
     
    	
    def gauss():
            tps1 = time()
            # solve equation by GAUSS method
            k = 0
            arret = 0
            while k!=n and arret!=1:
                i0 = recherchepivot(k,A)
                if i0 == -1:
                    arret = 1
                else:
                    if i0 == k:
                        A,b = elimination(k,A,b)
                        k+=1
                    else: 
                        A,b = permutation(i0,k,A,b)
                        A,b = elimination(k,A,b)
                        k+=1
            if k==n and A[n-1][n-1]!=0:
                # equation solutions
                x = remonte(A,b)
                result = "Ce système admet pour solution :"
                for i in range(n):
                    result += "\n x{} = {}".format(i+1, x[i])          
            else:
                # no unique solution
                result = "Ce système n'admet pas de solution unique"
            # Showing results
            tps2 = time()
            t =0
            t = tps2 - tps1
            result += "\ntemps d'execution: "
            result +=str(t)
            self.footerLabel.config(text=result, fg="blue", font="Helvetica 10 bold", justify=LEFT)
            	
		
	
#Execution de la fenetre
Graphique()
