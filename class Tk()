Help on module Tkinter:

NNAAMMEE
    Tkinter - Wrapper functions for Tcl/Tk.

FFIILLEE
    /usr/lib/python2.7/lib-tk/Tkinter.py

MMOODDUULLEE  DDOOCCSS
    http://docs.python.org/library/Tkinter

DDEESSCCRRIIPPTTIIOONN
    Tkinter provides classes which allow the display, positioning and
    control of widgets. Toplevel widgets are Tk and Toplevel. Other
    widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,
    Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox
    LabelFrame and PanedWindow.
    
    Properties of the widgets are specified with keyword arguments.
    Keyword arguments have the same name as the corresponding resource
    under Tk.
    
    Widgets are positioned with one of the geometry managers Place, Pack
    or Grid. These managers can be called with methods place, pack, grid
    available in every Widget.
    
    Actions are bound to events by resources (e.g. keyword argument
    command) or with the method bind.
    
    Example (Hello, World):
    import Tkinter
    from Tkconstants import *
    tk = Tkinter.Tk()
    frame = Tkinter.Frame(tk, relief=RIDGE, borderwidth=2)
    frame.pack(fill=BOTH,expand=1)
    label = Tkinter.Label(frame, text="Hello, World")
    label.pack(fill=X, expand=1)
    button = Tkinter.Button(frame,text="Exit",command=tk.destroy)
    button.pack(side=BOTTOM)
    tk.mainloop()

CCLLAASSSSEESS
    CallWrapper
    Event
    Grid
    Image
        BitmapImage
        PhotoImage
    Misc
        BaseWidget
            Toplevel(BaseWidget, Wm)
            Widget(BaseWidget, Pack, Place, Grid)
                Button
                    Studbutton
                    Tributton
                Canvas(Widget, XView, YView)
                Checkbutton
                Entry(Widget, XView)
                Frame
                Label
                LabelFrame
                Listbox(Widget, XView, YView)
                Menu
                Menubutton
                    OptionMenu
                Message
                PanedWindow
                Radiobutton
                Scale
                Scrollbar
                Spinbox(Widget, XView)
                Text(Widget, XView, YView)
        Tk(Misc, Wm)
    Pack
    Place
    Variable
        BooleanVar
        DoubleVar
        IntVar
        StringVar
    Wm
    XView
    YView
    
    class BBaasseeWWiiddggeett(Misc)
     |  Internal class.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master, widgetName, cnf={}, kw={}, extra=())
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
    
    class BBiittmmaappIImmaaggee(Image)
     |  Widget which can display a bitmap.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name=None, cnf={}, master=None, **kw)
     |      Create a bitmap with NAME.
     |      
     |      Valid resource names: background, data, file, foreground, maskdata, maskfile.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |  
     |  ____ddeell____(self)
     |  
     |  ____ggeettiitteemm____(self, key)
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |  
     |  ccoonnffiigg = configure(self, **kw)
     |      Configure the image.
     |  
     |  ccoonnffiigguurree(self, **kw)
     |      Configure the image.
     |  
     |  hheeiigghhtt(self)
     |      Return the height of the image.
     |  
     |  ttyyppee(self)
     |      Return the type of the imgage, e.g. "photo" or "bitmap".
     |  
     |  wwiiddtthh(self)
     |      Return the width of the image.
    
    class BBoooolleeaannVVaarr(Variable)
     |  Value holder for boolean variables.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, value=None, name=None)
     |      Construct a boolean variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to False)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  ggeett(self)
     |      Return the value of the variable as a bool.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ____ddeell____(self)
     |      Unset the variable in Tcl.
     |  
     |  ____eeqq____(self, other)
     |      Comparison for equality (==).
     |      
     |      Note: if the Variable's master matters to behavior
     |      also compare self._master == other._master
     |  
     |  ____ssttrr____(self)
     |      Return the name of the variable in Tcl.
     |  
     |  sseett(self, value)
     |      Set the variable to VALUE.
     |  
     |  ttrraaccee = trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvaarriiaabbllee(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvddeelleettee(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |  
     |  ttrraaccee__vviinnffoo(self)
     |      Return all trace callback information.
    
    class BBuuttttoonn(Widget)
     |  Button widget.
     |  
     |  Method resolution order:
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a button widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          activebackground, activeforeground, anchor,
     |          background, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, repeatdelay,
     |          repeatinterval, takefocus, text,
     |          textvariable, underline, wraplength
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, compound, default, height,
     |          overrelief, state, width
     |  
     |  ffllaasshh(self)
     |      Flash the button.
     |      
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |  
     |  iinnvvookkee(self)
     |      Invoke the command associated with the button.
     |      
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |  
     |  ttkkBBuuttttoonnDDoowwnn(self, *dummy)
     |  
     |  ttkkBBuuttttoonnEEnntteerr(self, *dummy)
     |  
     |  ttkkBBuuttttoonnIInnvvookkee(self, *dummy)
     |  
     |  ttkkBBuuttttoonnLLeeaavvee(self, *dummy)
     |  
     |  ttkkBBuuttttoonnUUpp(self, *dummy)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class CCaallllWWrraappppeerr
     |  Internal class. Stores function to call when some user
     |  defined Tcl function is called e.g. after an event occurred.
     |  
     |  Methods defined here:
     |  
     |  ____ccaallll____(self, *args)
     |      Apply first function SUBST to arguments, than FUNC.
     |  
     |  ____iinniitt____(self, func, subst, widget)
     |      Store FUNC, SUBST and WIDGET as members.
    
    class CCaannvvaass(Widget, XView, YView)
     |  Canvas widget to display graphical elements like lines or text.
     |  
     |  Method resolution order:
     |      Canvas
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a canvas widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, closeenough,
     |      confine, cursor, height, highlightbackground, highlightcolor,
     |      highlightthickness, insertbackground, insertborderwidth,
     |      insertofftime, insertontime, insertwidth, offset, relief,
     |      scrollregion, selectbackground, selectborderwidth, selectforeground,
     |      state, takefocus, width, xscrollcommand, xscrollincrement,
     |      yscrollcommand, yscrollincrement.
     |  
     |  aaddddttaagg(self, *args)
     |      Internal function.
     |  
     |  aaddddttaagg__aabboovvee(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items above TAGORID.
     |  
     |  aaddddttaagg__aallll(self, newtag)
     |      Add tag NEWTAG to all items.
     |  
     |  aaddddttaagg__bbeellooww(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items below TAGORID.
     |  
     |  aaddddttaagg__cclloosseesstt(self, newtag, x, y, halo=None, start=None)
     |      Add tag NEWTAG to item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closests). If START is specified the next below this tag is taken.
     |  
     |  aaddddttaagg__eenncclloosseedd(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items in the rectangle defined
     |      by X1,Y1,X2,Y2.
     |  
     |  aaddddttaagg__oovveerrllaappppiinngg(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |  
     |  aaddddttaagg__wwiitthhttaagg(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items with TAGORID.
     |  
     |  bbbbooxx(self, *args)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses all items with tags specified as arguments.
     |  
     |  ccaannvvaassxx(self, screenx, gridspacing=None)
     |      Return the canvas x coordinate of pixel position SCREENX rounded
     |      to nearest multiple of GRIDSPACING units.
     |  
     |  ccaannvvaassyy(self, screeny, gridspacing=None)
     |      Return the canvas y coordinate of pixel position SCREENY rounded
     |      to nearest multiple of GRIDSPACING units.
     |  
     |  ccoooorrddss(self, *args)
     |      Return a list of coordinates for the item given in ARGS.
     |  
     |  ccrreeaattee__aarrcc(self, *args, **kw)
     |      Create arc shaped region with coordinates x1,y1,x2,y2.
     |  
     |  ccrreeaattee__bbiittmmaapp(self, *args, **kw)
     |      Create bitmap with coordinates x1,y1.
     |  
     |  ccrreeaattee__iimmaaggee(self, *args, **kw)
     |      Create image item with coordinates x1,y1.
     |  
     |  ccrreeaattee__lliinnee(self, *args, **kw)
     |      Create line with coordinates x1,y1,...,xn,yn.
     |  
     |  ccrreeaattee__oovvaall(self, *args, **kw)
     |      Create oval with coordinates x1,y1,x2,y2.
     |  
     |  ccrreeaattee__ppoollyyggoonn(self, *args, **kw)
     |      Create polygon with coordinates x1,y1,...,xn,yn.
     |  
     |  ccrreeaattee__rreeccttaannggllee(self, *args, **kw)
     |      Create rectangle with coordinates x1,y1,x2,y2.
     |  
     |  ccrreeaattee__tteexxtt(self, *args, **kw)
     |      Create text with coordinates x1,y1.
     |  
     |  ccrreeaattee__wwiinnddooww(self, *args, **kw)
     |      Create window with coordinates x1,y1,x2,y2.
     |  
     |  ddcchhaarrss(self, *args)
     |      Delete characters of text items identified by tag or id in ARGS (possibly
     |      several times) from FIRST to LAST character (including).
     |  
     |  ddeelleettee(self, *args)
     |      Delete items identified by all tag or ids contained in ARGS.
     |  
     |  ddttaagg(self, *args)
     |      Delete tag or id given as last arguments in ARGS from items
     |      identified by first argument in ARGS.
     |  
     |  ffiinndd(self, *args)
     |      Internal function.
     |  
     |  ffiinndd__aabboovvee(self, tagOrId)
     |      Return items above TAGORID.
     |  
     |  ffiinndd__aallll(self)
     |      Return all items.
     |  
     |  ffiinndd__bbeellooww(self, tagOrId)
     |      Return all items below TAGORID.
     |  
     |  ffiinndd__cclloosseesstt(self, x, y, halo=None, start=None)
     |      Return item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closests). If START is specified the next below this tag is taken.
     |  
     |  ffiinndd__eenncclloosseedd(self, x1, y1, x2, y2)
     |      Return all items in rectangle defined
     |      by X1,Y1,X2,Y2.
     |  
     |  ffiinndd__oovveerrllaappppiinngg(self, x1, y1, x2, y2)
     |      Return all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |  
     |  ffiinndd__wwiitthhttaagg(self, tagOrId)
     |      Return all items with TAGORID.
     |  
     |  ffooccuuss(self, *args)
     |      Set focus to the first item specified in ARGS.
     |  
     |  ggeettttaaggss(self, *args)
     |      Return tags associated with the first item specified in ARGS.
     |  
     |  iiccuurrssoorr(self, *args)
     |      Set cursor at position POS in the item identified by TAGORID.
     |      In ARGS TAGORID must be first.
     |  
     |  iinnddeexx(self, *args)
     |      Return position of cursor as integer in item specified in ARGS.
     |  
     |  iinnsseerrtt(self, *args)
     |      Insert TEXT in item TAGORID at position POS. ARGS must
     |      be TAGORID POS TEXT.
     |  
     |  iitteemmccggeett(self, tagOrId, option)
     |      Return the resource value for an OPTION for item TAGORID.
     |  
     |  iitteemmccoonnffiigg = itemconfigure(self, tagOrId, cnf=None, **kw)
     |  
     |  iitteemmccoonnffiigguurree(self, tagOrId, cnf=None, **kw)
     |      Configure resources of an item TAGORID.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method without arguments.
     |  
     |  lliifftt = tag_raise(self, *args)
     |  
     |  lloowweerr = tag_lower(self, *args)
     |  
     |  mmoovvee(self, *args)
     |      Move an item TAGORID given in ARGS.
     |  
     |  ppoossttssccrriipptt(self, cnf={}, **kw)
     |      Print the contents of the canvas to a postscript
     |      file. Valid options: colormap, colormode, file, fontmap,
     |      height, pageanchor, pageheight, pagewidth, pagex, pagey,
     |      rotate, witdh, x, y.
     |  
     |  ssccaallee(self, *args)
     |      Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.
     |  
     |  ssccaann__ddrraaggttoo(self, x, y, gain=10)
     |      Adjust the view of the canvas to GAIN times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  ssccaann__mmaarrkk(self, x, y)
     |      Remember the current X, Y coordinates.
     |  
     |  sseelleecctt__aaddjjuusstt(self, tagOrId, index)
     |      Adjust the end of the selection near the cursor of an item TAGORID to index.
     |  
     |  sseelleecctt__cclleeaarr(self)
     |      Clear the selection if it is in this widget.
     |  
     |  sseelleecctt__ffrroomm(self, tagOrId, index)
     |      Set the fixed end of a selection in item TAGORID to INDEX.
     |  
     |  sseelleecctt__iitteemm(self)
     |      Return the item which has the selection.
     |  
     |  sseelleecctt__ttoo(self, tagOrId, index)
     |      Set the variable end of a selection in item TAGORID to INDEX.
     |  
     |  ttaagg__bbiinndd(self, tagOrId, sequence=None, func=None, add=None)
     |      Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |  
     |  ttaagg__lloowweerr(self, *args)
     |      Lower an item TAGORID given in ARGS
     |      (optional below another item).
     |  
     |  ttaagg__rraaiissee(self, *args)
     |      Raise an item TAGORID given in ARGS
     |      (optional above another item).
     |  
     |  ttaagg__uunnbbiinndd(self, tagOrId, sequence, funcid=None)
     |      Unbind for all items with TAGORID for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  ttkkrraaiissee = tag_raise(self, *args)
     |  
     |  ttyyppee(self, tagOrId)
     |      Return the type of the item TAGORID.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  xxvviieeww(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xxvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xxvviieeww__ssccrroollll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |  
     |  yyvviieeww(self, *args)
     |      Query and change the vertical position of the view.
     |  
     |  yyvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |  
     |  yyvviieeww__ssccrroollll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).
    
    class CChheecckkbbuuttttoonn(Widget)
     |  Checkbutton widget which is either in on- or off-state.
     |  
     |  Method resolution order:
     |      Checkbutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a checkbutton widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, offvalue, onvalue, padx, pady, relief,
     |      selectcolor, selectimage, state, takefocus, text, textvariable,
     |      underline, variable, width, wraplength.
     |  
     |  ddeesseelleecctt(self)
     |      Put the button in off-state.
     |  
     |  ffllaasshh(self)
     |      Flash the button.
     |  
     |  iinnvvookkee(self)
     |      Toggle the button and invoke a command if given as resource.
     |  
     |  sseelleecctt(self)
     |      Put the button in on-state.
     |  
     |  ttooggggllee(self)
     |      Toggle the button.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class DDoouubblleeVVaarr(Variable)
     |  Value holder for float variables.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, value=None, name=None)
     |      Construct a float variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0.0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  ggeett(self)
     |      Return the value of the variable as a float.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ____ddeell____(self)
     |      Unset the variable in Tcl.
     |  
     |  ____eeqq____(self, other)
     |      Comparison for equality (==).
     |      
     |      Note: if the Variable's master matters to behavior
     |      also compare self._master == other._master
     |  
     |  ____ssttrr____(self)
     |      Return the name of the variable in Tcl.
     |  
     |  sseett(self, value)
     |      Set the variable to VALUE.
     |  
     |  ttrraaccee = trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvaarriiaabbllee(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvddeelleettee(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |  
     |  ttrraaccee__vviinnffoo(self)
     |      Return all trace callback information.
    
    class EEnnttrryy(Widget, XView)
     |  Entry widget which allows to display simple text.
     |  
     |  Method resolution order:
     |      Entry
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct an entry widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, highlightbackground,
     |      highlightcolor, highlightthickness, insertbackground,
     |      insertborderwidth, insertofftime, insertontime, insertwidth,
     |      invalidcommand, invcmd, justify, relief, selectbackground,
     |      selectborderwidth, selectforeground, show, state, takefocus,
     |      textvariable, validate, validatecommand, vcmd, width,
     |      xscrollcommand.
     |  
     |  ddeelleettee(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |  
     |  ggeett(self)
     |      Return the text.
     |  
     |  iiccuurrssoorr(self, index)
     |      Insert cursor at INDEX.
     |  
     |  iinnddeexx(self, index)
     |      Return position of cursor.
     |  
     |  iinnsseerrtt(self, index, string)
     |      Insert STRING at INDEX.
     |  
     |  ssccaann__ddrraaggttoo(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  ssccaann__mmaarrkk(self, x)
     |      Remember the current X, Y coordinates.
     |  
     |  sseelleecctt__aaddjjuusstt = selection_adjust(self, index)
     |  
     |  sseelleecctt__cclleeaarr = selection_clear(self)
     |  
     |  sseelleecctt__ffrroomm = selection_from(self, index)
     |  
     |  sseelleecctt__pprreesseenntt = selection_present(self)
     |  
     |  sseelleecctt__rraannggee = selection_range(self, start, end)
     |  
     |  sseelleecctt__ttoo = selection_to(self, index)
     |  
     |  sseelleeccttiioonn__aaddjjuusstt(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |  
     |  sseelleeccttiioonn__cclleeaarr(self)
     |      Clear the selection if it is in this widget.
     |  
     |  sseelleeccttiioonn__ffrroomm(self, index)
     |      Set the fixed end of a selection to INDEX.
     |  
     |  sseelleeccttiioonn__pprreesseenntt(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |  
     |  sseelleeccttiioonn__rraannggee(self, start, end)
     |      Set the selection from START to END (not included).
     |  
     |  sseelleeccttiioonn__ttoo(self, index)
     |      Set the variable end of a selection to INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  xxvviieeww(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xxvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xxvviieeww__ssccrroollll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
    
    class EEvveenntt
     |  Container for the properties of an event.
     |  
     |  Instances of this type are generated if one of the following events occurs:
     |  
     |  KeyPress, KeyRelease - for keyboard events
     |  ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events
     |  Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,
     |  Colormap, Gravity, Reparent, Property, Destroy, Activate,
     |  Deactivate - for window events.
     |  
     |  If a callback function for one of these events is registered
     |  using bind, bind_all, bind_class, or tag_bind, the callback is
     |  called with an Event as first argument. It will have the
     |  following attributes (in braces are the event types for which
     |  the attribute is valid):
     |  
     |      serial - serial number of event
     |  num - mouse button pressed (ButtonPress, ButtonRelease)
     |  focus - whether the window has the focus (Enter, Leave)
     |  height - height of the exposed window (Configure, Expose)
     |  width - width of the exposed window (Configure, Expose)
     |  keycode - keycode of the pressed key (KeyPress, KeyRelease)
     |  state - state of the event as a number (ButtonPress, ButtonRelease,
     |                          Enter, KeyPress, KeyRelease,
     |                          Leave, Motion)
     |  state - state as a string (Visibility)
     |  time - when the event occurred
     |  x - x-position of the mouse
     |  y - y-position of the mouse
     |  x_root - x-position of the mouse on the screen
     |           (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
     |  y_root - y-position of the mouse on the screen
     |           (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
     |  char - pressed character (KeyPress, KeyRelease)
     |  send_event - see X/Windows documentation
     |  keysym - keysym of the event as a string (KeyPress, KeyRelease)
     |  keysym_num - keysym of the event as a number (KeyPress, KeyRelease)
     |  type - type of the event as a number
     |  widget - widget in which the event occurred
     |  delta - delta of wheel movement (MouseWheel)
    
    class FFrraammee(Widget)
     |  Frame widget which may contain other widgets and can have a 3D border.
     |  
     |  Method resolution order:
     |      Frame
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a frame widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, class,
     |      colormap, container, cursor, height, highlightbackground,
     |      highlightcolor, highlightthickness, relief, takefocus, visual, width.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class GGrriidd
     |  Geometry manager Grid.
     |  
     |  Base class to use the methods grid_* in every widget.
     |  
     |  Methods defined here:
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None) from Misc
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw) from Misc
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = grid_configure(self, cnf={}, **kw)
     |  
     |  ccoonnffiigguurree = grid_configure(self, cnf={}, **kw)
     |  
     |  ffoorrggeett = grid_forget(self)
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None) from Misc
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw) from Misc
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y) from Misc
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_']) from Misc
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw) from Misc
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self) from Misc
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None) from Misc
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iinnffoo = grid_info(self)
     |  
     |  llooccaattiioonn = grid_location(self, x, y) from Misc
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  pprrooppaaggaattee = grid_propagate(self, flag=['_noarg_']) from Misc
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw) from Misc
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ssiizzee = grid_size(self) from Misc
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = grid_slaves(self, row=None, column=None) from Misc
     |      Return a list of all slaves of this widget
     |      in its packing order.
    
    class IImmaaggee
     |  Base class for images.
     |  
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |  
     |  ____ggeettiitteemm____(self, key)
     |  
     |  ____iinniitt____(self, imgtype, name=None, cnf={}, master=None, **kw)
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |  
     |  ccoonnffiigg = configure(self, **kw)
     |  
     |  ccoonnffiigguurree(self, **kw)
     |      Configure the image.
     |  
     |  hheeiigghhtt(self)
     |      Return the height of the image.
     |  
     |  ttyyppee(self)
     |      Return the type of the imgage, e.g. "photo" or "bitmap".
     |  
     |  wwiiddtthh(self)
     |      Return the width of the image.
    
    class IInnttVVaarr(Variable)
     |  Value holder for integer variables.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, value=None, name=None)
     |      Construct an integer variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  ggeett(self)
     |      Return the value of the variable as an integer.
     |  
     |  sseett(self, value)
     |      Set the variable to value, converting booleans to integers.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ____ddeell____(self)
     |      Unset the variable in Tcl.
     |  
     |  ____eeqq____(self, other)
     |      Comparison for equality (==).
     |      
     |      Note: if the Variable's master matters to behavior
     |      also compare self._master == other._master
     |  
     |  ____ssttrr____(self)
     |      Return the name of the variable in Tcl.
     |  
     |  ttrraaccee = trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvaarriiaabbllee(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvddeelleettee(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |  
     |  ttrraaccee__vviinnffoo(self)
     |      Return all trace callback information.
    
    class LLaabbeell(Widget)
     |  Label widget which can display text and bitmaps.
     |  
     |  Method resolution order:
     |      Label
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a label widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          activebackground, activeforeground, anchor,
     |          background, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, takefocus, text,
     |          textvariable, underline, wraplength
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          height, state, width
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class LLaabbeellFFrraammee(Widget)
     |  labelframe widget.
     |  
     |  Method resolution order:
     |      LabelFrame
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a labelframe widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          borderwidth, cursor, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, padx, pady, relief,
     |          takefocus, text
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          background, class, colormap, container,
     |          height, labelanchor, labelwidget,
     |          visual, width
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class LLiissttbbooxx(Widget, XView, YView)
     |  Listbox widget which can display a list of strings.
     |  
     |  Method resolution order:
     |      Listbox
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a listbox widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, height, highlightbackground,
     |      highlightcolor, highlightthickness, relief, selectbackground,
     |      selectborderwidth, selectforeground, selectmode, setgrid, takefocus,
     |      width, xscrollcommand, yscrollcommand, listvariable.
     |  
     |  aaccttiivvaattee(self, index)
     |      Activate item identified by INDEX.
     |  
     |  bbbbooxx(self, *args)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses the item identified by index in ARGS.
     |  
     |  ccuurrsseelleeccttiioonn(self)
     |      Return list of indices of currently selected item.
     |  
     |  ddeelleettee(self, first, last=None)
     |      Delete items from FIRST to LAST (not included).
     |  
     |  ggeett(self, first, last=None)
     |      Get list of items from FIRST to LAST (not included).
     |  
     |  iinnddeexx(self, index)
     |      Return index of item identified with INDEX.
     |  
     |  iinnsseerrtt(self, index, *elements)
     |      Insert ELEMENTS at INDEX.
     |  
     |  iitteemmccggeett(self, index, option)
     |      Return the resource value for an ITEM and an OPTION.
     |  
     |  iitteemmccoonnffiigg = itemconfigure(self, index, cnf=None, **kw)
     |  
     |  iitteemmccoonnffiigguurree(self, index, cnf=None, **kw)
     |      Configure resources of an ITEM.
     |      
     |      The values for resources are specified as keyword arguments.
     |      To get an overview about the allowed keyword arguments
     |      call the method without arguments.
     |      Valid resource names: background, bg, foreground, fg,
     |      selectbackground, selectforeground.
     |  
     |  nneeaarreesstt(self, y)
     |      Get index of item which is nearest to y coordinate Y.
     |  
     |  ssccaann__ddrraaggttoo(self, x, y)
     |      Adjust the view of the listbox to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  ssccaann__mmaarrkk(self, x, y)
     |      Remember the current X, Y coordinates.
     |  
     |  sseeee(self, index)
     |      Scroll such that INDEX is visible.
     |  
     |  sseelleecctt__aanncchhoorr = selection_anchor(self, index)
     |  
     |  sseelleecctt__cclleeaarr = selection_clear(self, first, last=None)
     |  
     |  sseelleecctt__iinncclluuddeess = selection_includes(self, index)
     |  
     |  sseelleecctt__sseett = selection_set(self, first, last=None)
     |  
     |  sseelleeccttiioonn__aanncchhoorr(self, index)
     |      Set the fixed end oft the selection to INDEX.
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, first, last=None)
     |      Clear the selection from FIRST to LAST (not included).
     |  
     |  sseelleeccttiioonn__iinncclluuddeess(self, index)
     |      Return 1 if INDEX is part of the selection.
     |  
     |  sseelleeccttiioonn__sseett(self, first, last=None)
     |      Set the selection from FIRST to LAST (not included) without
     |      changing the currently selected elements.
     |  
     |  ssiizzee(self)
     |      Return the number of elements in the listbox.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  xxvviieeww(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xxvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xxvviieeww__ssccrroollll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |  
     |  yyvviieeww(self, *args)
     |      Query and change the vertical position of the view.
     |  
     |  yyvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |  
     |  yyvviieeww__ssccrroollll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).
    
    class MMeennuu(Widget)
     |  Menu widget which allows to display menu bars, pull-down menus and pop-up menus.
     |  
     |  Method resolution order:
     |      Menu
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct menu widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activeborderwidth,
     |      activeforeground, background, bd, bg, borderwidth, cursor,
     |      disabledforeground, fg, font, foreground, postcommand, relief,
     |      selectcolor, takefocus, tearoff, tearoffcommand, title, type.
     |  
     |  aaccttiivvaattee(self, index)
     |      Activate entry at INDEX.
     |  
     |  aadddd(self, itemType, cnf={}, **kw)
     |      Internal function.
     |  
     |  aadddd__ccaassccaaddee(self, cnf={}, **kw)
     |      Add hierarchical menu item.
     |  
     |  aadddd__cchheecckkbbuuttttoonn(self, cnf={}, **kw)
     |      Add checkbutton menu item.
     |  
     |  aadddd__ccoommmmaanndd(self, cnf={}, **kw)
     |      Add command menu item.
     |  
     |  aadddd__rraaddiioobbuuttttoonn(self, cnf={}, **kw)
     |      Addd radio menu item.
     |  
     |  aadddd__sseeppaarraattoorr(self, cnf={}, **kw)
     |      Add separator.
     |  
     |  ddeelleettee(self, index1, index2=None)
     |      Delete menu items between INDEX1 and INDEX2 (included).
     |  
     |  eennttrryyccggeett(self, index, option)
     |      Return the resource value of an menu item for OPTION at INDEX.
     |  
     |  eennttrryyccoonnffiigg = entryconfigure(self, index, cnf=None, **kw)
     |  
     |  eennttrryyccoonnffiigguurree(self, index, cnf=None, **kw)
     |      Configure a menu item at INDEX.
     |  
     |  iinnddeexx(self, index)
     |      Return the index of a menu item identified by INDEX.
     |  
     |  iinnsseerrtt(self, index, itemType, cnf={}, **kw)
     |      Internal function.
     |  
     |  iinnsseerrtt__ccaassccaaddee(self, index, cnf={}, **kw)
     |      Add hierarchical menu item at INDEX.
     |  
     |  iinnsseerrtt__cchheecckkbbuuttttoonn(self, index, cnf={}, **kw)
     |      Add checkbutton menu item at INDEX.
     |  
     |  iinnsseerrtt__ccoommmmaanndd(self, index, cnf={}, **kw)
     |      Add command menu item at INDEX.
     |  
     |  iinnsseerrtt__rraaddiioobbuuttttoonn(self, index, cnf={}, **kw)
     |      Addd radio menu item at INDEX.
     |  
     |  iinnsseerrtt__sseeppaarraattoorr(self, index, cnf={}, **kw)
     |      Add separator at INDEX.
     |  
     |  iinnvvookkee(self, index)
     |      Invoke a menu item identified by INDEX and execute
     |      the associated command.
     |  
     |  ppoosstt(self, x, y)
     |      Display a menu at position X,Y.
     |  
     |  ttkk__bbiinnddFFoorrTTrraavveerrssaall(self)
     |  
     |  ttkk__ffiirrssttMMeennuu(self)
     |  
     |  ttkk__ggeettMMeennuuBBuuttttoonnss(self)
     |  
     |  ttkk__iinnvvookkeeMMeennuu(self)
     |  
     |  ttkk__mmbbBBuuttttoonnDDoowwnn(self)
     |  
     |  ttkk__mmbbPPoosstt(self)
     |  
     |  ttkk__mmbbUUnnppoosstt(self)
     |  
     |  ttkk__nneexxttMMeennuu(self, count)
     |  
     |  ttkk__nneexxttMMeennuuEEnnttrryy(self, count)
     |  
     |  ttkk__ppooppuupp(self, x, y, entry='')
     |      Post the menu at position X,Y with entry ENTRY.
     |  
     |  ttkk__ttrraavveerrsseeTTooMMeennuu(self, char)
     |  
     |  ttkk__ttrraavveerrsseeWWiitthhiinnMMeennuu(self, char)
     |  
     |  ttyyppee(self, index)
     |      Return the type of the menu item at INDEX.
     |  
     |  uunnppoosstt(self)
     |      Unmap a menu.
     |  
     |  yyppoossiittiioonn(self, index)
     |      Return the y-position of the topmost pixel of the menu item at INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class MMeennuubbuuttttoonn(Widget)
     |  Menubutton widget, obsolete since Tk8.0.
     |  
     |  Method resolution order:
     |      Menubutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class MMeessssaaggee(Widget)
     |  Message widget to display multiline text. Obsolete since Label does it too.
     |  
     |  Method resolution order:
     |      Message
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class MMiisscc
     |  Internal class.
     |  
     |  Base class which defines methods common for interior widgets.
     |  
     |  Methods defined here:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  ddeessttrrooyy(self)
     |      Internal function.
     |      
     |      Delete all Tcl commands created for
     |      this widget in the Tcl interpreter.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |  
     |  ssllaavveess = pack_slaves(self)
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
    
    class OOppttiioonnMMeennuu(Menubutton)
     |  OptionMenu which allows the user to select a value from a menu.
     |  
     |  Method resolution order:
     |      OptionMenu
     |      Menubutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____ggeettiitteemm____(self, name)
     |  
     |  ____iinniitt____(self, master, variable, value, *values, **kwargs)
     |      Construct an optionmenu widget with the parent MASTER, with
     |      the resource textvariable set to VARIABLE, the initially selected
     |      value VALUE, the other menu values VALUES and an additional
     |      keyword argument command.
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this widget and the associated menu.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class PPaacckk
     |  Geometry manager Pack.
     |  
     |  Base class to use the methods pack_* in every widget.
     |  
     |  Methods defined here:
     |  
     |  ccoonnffiigg = pack_configure(self, cnf={}, **kw)
     |  
     |  ccoonnffiigguurree = pack_configure(self, cnf={}, **kw)
     |  
     |  ffoorrggeett = pack_forget(self)
     |  
     |  iinnffoo = pack_info(self)
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_']) from Misc
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self) from Misc
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_']) from Misc
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ssllaavveess = pack_slaves(self) from Misc
     |      Return a list of all slaves of this widget
     |      in its packing order.
    
    class PPaanneeddWWiinnddooww(Widget)
     |  panedwindow widget.
     |  
     |  Method resolution order:
     |      PanedWindow
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a panedwindow widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          background, borderwidth, cursor, height,
     |          orient, relief, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          handlepad, handlesize, opaqueresize,
     |          sashcursor, sashpad, sashrelief,
     |          sashwidth, showhandle,
     |  
     |  aadddd(self, child, **kw)
     |      Add a child widget to the panedwindow in a new pane.
     |      
     |      The child argument is the name of the child widget
     |      followed by pairs of arguments that specify how to
     |      manage the windows. The possible options and values
     |      are the ones accepted by the paneconfigure method.
     |  
     |  ffoorrggeett = remove(self, child)
     |  
     |  iiddeennttiiffyy(self, x, y)
     |      Identify the panedwindow component at point x, y
     |      
     |      If the point is over a sash or a sash handle, the result
     |      is a two element list containing the index of the sash or
     |      handle, and a word indicating whether it is over a sash
     |      or a handle, such as {0 sash} or {2 handle}. If the point
     |      is over any other part of the panedwindow, the result is
     |      an empty list.
     |  
     |  ppaanneeccggeett(self, child, option)
     |      Query a management option for window.
     |      
     |      Option may be any value allowed by the paneconfigure subcommand
     |  
     |  ppaanneeccoonnffiigg = paneconfigure(self, tagOrId, cnf=None, **kw)
     |  
     |  ppaanneeccoonnffiigguurree(self, tagOrId, cnf=None, **kw)
     |      Query or modify the management options for window.
     |      
     |      If no option is specified, returns a list describing all
     |      of the available options for pathName.  If option is
     |      specified with no value, then the command returns a list
     |      describing the one named option (this list will be identical
     |      to the corresponding sublist of the value returned if no
     |      option is specified). If one or more option-value pairs are
     |      specified, then the command modifies the given widget
     |      option(s) to have the given value(s); in this case the
     |      command returns an empty string. The following options
     |      are supported:
     |      
     |      after window
     |          Insert the window after the window specified. window
     |          should be the name of a window already managed by pathName.
     |      before window
     |          Insert the window before the window specified. window
     |          should be the name of a window already managed by pathName.
     |      height size
     |          Specify a height for the window. The height will be the
     |          outer dimension of the window including its border, if
     |          any. If size is an empty string, or if -height is not
     |          specified, then the height requested internally by the
     |          window will be used initially; the height may later be
     |          adjusted by the movement of sashes in the panedwindow.
     |          Size may be any value accepted by Tk_GetPixels.
     |      minsize n
     |          Specifies that the size of the window cannot be made
     |          less than n. This constraint only affects the size of
     |          the widget in the paned dimension -- the x dimension
     |          for horizontal panedwindows, the y dimension for
     |          vertical panedwindows. May be any value accepted by
     |          Tk_GetPixels.
     |      padx n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the X-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      pady n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the Y-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      sticky style
     |          If a window's pane is larger than the requested
     |          dimensions of the window, this option may be used
     |          to position (or stretch) the window within its pane.
     |          Style is a string that contains zero or more of the
     |          characters n, s, e or w. The string can optionally
     |          contains spaces or commas, but they are ignored. Each
     |          letter refers to a side (north, south, east, or west)
     |          that the window will "stick" to. If both n and s
     |          (or e and w) are specified, the window will be
     |          stretched to fill the entire height (or width) of
     |          its cavity.
     |      width size
     |          Specify a width for the window. The width will be
     |          the outer dimension of the window including its
     |          border, if any. If size is an empty string, or
     |          if -width is not specified, then the width requested
     |          internally by the window will be used initially; the
     |          width may later be adjusted by the movement of sashes
     |          in the panedwindow. Size may be any value accepted by
     |          Tk_GetPixels.
     |  
     |  ppaanneess(self)
     |      Returns an ordered list of the child panes.
     |  
     |  pprrooxxyy(self, *args)
     |      Internal function.
     |  
     |  pprrooxxyy__ccoooorrdd(self)
     |      Return the x and y pair of the most recent proxy location
     |  
     |  pprrooxxyy__ffoorrggeett(self)
     |      Remove the proxy from the display.
     |  
     |  pprrooxxyy__ppllaaccee(self, x, y)
     |      Place the proxy at the given x and y coordinates.
     |  
     |  rreemmoovvee(self, child)
     |      Remove the pane containing child from the panedwindow
     |      
     |      All geometry management options for child will be forgotten.
     |  
     |  ssaasshh(self, *args)
     |      Internal function.
     |  
     |  ssaasshh__ccoooorrdd(self, index)
     |      Return the current x and y pair for the sash given by index.
     |      
     |      Index must be an integer between 0 and 1 less than the
     |      number of panes in the panedwindow. The coordinates given are
     |      those of the top left corner of the region containing the sash.
     |      pathName sash dragto index x y This command computes the
     |      difference between the given coordinates and the coordinates
     |      given to the last sash coord command for the given sash. It then
     |      moves that sash the computed difference. The return value is the
     |      empty string.
     |  
     |  ssaasshh__mmaarrkk(self, index)
     |      Records x and y for the sash given by index;
     |      
     |      Used in conjunction with later dragto commands to move the sash.
     |  
     |  ssaasshh__ppllaaccee(self, index, x, y)
     |      Place the sash given by index at the given coordinates
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class PPhhoottooIImmaaggee(Image)
     |  Widget which can display colored images in GIF, PPM/PGM format.
     |  
     |  Methods defined here:
     |  
     |  ____ggeettiitteemm____(self, key)
     |      # XXX config
     |  
     |  ____iinniitt____(self, name=None, cnf={}, master=None, **kw)
     |      Create an image with NAME.
     |      
     |      Valid resource names: data, format, file, gamma, height, palette,
     |      width.
     |  
     |  bbllaannkk(self)
     |      Display a transparent image.
     |  
     |  ccggeett(self, option)
     |      Return the value of OPTION.
     |  
     |  ccooppyy(self)
     |      Return a new PhotoImage with the same image as this widget.
     |  
     |  ggeett(self, x, y)
     |      Return the color (red, green, blue) of the pixel at X,Y.
     |  
     |  ppuutt(self, data, to=None)
     |      Put row formatted colors to image starting from
     |      position TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))
     |  
     |  ssuubbssaammppllee(self, x, y='')
     |      Return a new PhotoImage based on the same image as this widget
     |      but use only every Xth or Yth pixel.
     |  
     |  wwrriittee(self, filename, format=None, from_coords=None)
     |      Write image to file FILENAME in FORMAT starting from
     |      position FROM_COORDS.
     |  
     |  zzoooomm(self, x, y='')
     |      Return a new PhotoImage with the same image as this widget
     |      but zoom it with X and Y.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |  
     |  ____ddeell____(self)
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |  
     |  ccoonnffiigg = configure(self, **kw)
     |      Configure the image.
     |  
     |  ccoonnffiigguurree(self, **kw)
     |      Configure the image.
     |  
     |  hheeiigghhtt(self)
     |      Return the height of the image.
     |  
     |  ttyyppee(self)
     |      Return the type of the imgage, e.g. "photo" or "bitmap".
     |  
     |  wwiiddtthh(self)
     |      Return the width of the image.
    
    class PPllaaccee
     |  Geometry manager Place.
     |  
     |  Base class to use the methods place_* in every widget.
     |  
     |  Methods defined here:
     |  
     |  ccoonnffiigg = place_configure(self, cnf={}, **kw)
     |  
     |  ccoonnffiigguurree = place_configure(self, cnf={}, **kw)
     |  
     |  ffoorrggeett = place_forget(self)
     |  
     |  iinnffoo = place_info(self)
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ppllaaccee__ssllaavveess(self) from Misc
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ssllaavveess = place_slaves(self) from Misc
     |      Return a list of all slaves of this widget
     |      in its packing order.
    
    class RRaaddiioobbuuttttoonn(Widget)
     |  Radiobutton widget which shows only one of several buttons in on-state.
     |  
     |  Method resolution order:
     |      Radiobutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a radiobutton widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, padx, pady, relief, selectcolor, selectimage,
     |      state, takefocus, text, textvariable, underline, value, variable,
     |      width, wraplength.
     |  
     |  ddeesseelleecctt(self)
     |      Put the button in off-state.
     |  
     |  ffllaasshh(self)
     |      Flash the button.
     |  
     |  iinnvvookkee(self)
     |      Toggle the button and invoke a command if given as resource.
     |  
     |  sseelleecctt(self)
     |      Put the button in on-state.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class SSccaallee(Widget)
     |  Scale widget which can display a numerical scale.
     |  
     |  Method resolution order:
     |      Scale
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a scale widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, background, bigincrement, bd,
     |      bg, borderwidth, command, cursor, digits, fg, font, foreground, from,
     |      highlightbackground, highlightcolor, highlightthickness, label,
     |      length, orient, relief, repeatdelay, repeatinterval, resolution,
     |      showvalue, sliderlength, sliderrelief, state, takefocus,
     |      tickinterval, to, troughcolor, variable, width.
     |  
     |  ccoooorrddss(self, value=None)
     |      Return a tuple (X,Y) of the point along the centerline of the
     |      trough that corresponds to VALUE or the current value if None is
     |      given.
     |  
     |  ggeett(self)
     |      Get the current value as integer or float.
     |  
     |  iiddeennttiiffyy(self, x, y)
     |      Return where the point X,Y lies. Valid return values are "slider",
     |      "though1" and "though2".
     |  
     |  sseett(self, value)
     |      Set the value to VALUE.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class SSccrroollllbbaarr(Widget)
     |  Scrollbar widget which displays a slider at a certain position.
     |  
     |  Method resolution order:
     |      Scrollbar
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a scrollbar widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activerelief,
     |      background, bd, bg, borderwidth, command, cursor,
     |      elementborderwidth, highlightbackground,
     |      highlightcolor, highlightthickness, jump, orient,
     |      relief, repeatdelay, repeatinterval, takefocus,
     |      troughcolor, width.
     |  
     |  aaccttiivvaattee(self, index)
     |      Display the element at INDEX with activebackground and activerelief.
     |      INDEX can be "arrow1","slider" or "arrow2".
     |  
     |  ddeellttaa(self, deltax, deltay)
     |      Return the fractional change of the scrollbar setting if it
     |      would be moved by DELTAX or DELTAY pixels.
     |  
     |  ffrraaccttiioonn(self, x, y)
     |      Return the fractional value which corresponds to a slider
     |      position of X,Y.
     |  
     |  ggeett(self)
     |      Return the current fractional values (upper and lower end)
     |      of the slider position.
     |  
     |  iiddeennttiiffyy(self, x, y)
     |      Return the element under position X,Y as one of
     |      "arrow1","slider","arrow2" or "".
     |  
     |  sseett(self, *args)
     |      Set the fractional values of the slider position (upper and
     |      lower ends as value between 0 and 1).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class SSppiinnbbooxx(Widget, XView)
     |  spinbox widget.
     |  
     |  Method resolution order:
     |      Spinbox
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a spinbox widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          activebackground, background, borderwidth,
     |          cursor, exportselection, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, insertbackground,
     |          insertborderwidth, insertofftime,
     |          insertontime, insertwidth, justify, relief,
     |          repeatdelay, repeatinterval,
     |          selectbackground, selectborderwidth
     |          selectforeground, takefocus, textvariable
     |          xscrollcommand.
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          buttonbackground, buttoncursor,
     |          buttondownrelief, buttonuprelief,
     |          command, disabledbackground,
     |          disabledforeground, format, from,
     |          invalidcommand, increment,
     |          readonlybackground, state, to,
     |          validate, validatecommand values,
     |          width, wrap,
     |  
     |  bbbbooxx(self, index)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a
     |      rectangle which encloses the character given by index.
     |      
     |      The first two elements of the list give the x and y
     |      coordinates of the upper-left corner of the screen
     |      area covered by the character (in pixels relative
     |      to the widget) and the last two elements give the
     |      width and height of the character, in pixels. The
     |      bounding box may refer to a region outside the
     |      visible area of the window.
     |  
     |  ddeelleettee(self, first, last=None)
     |      Delete one or more elements of the spinbox.
     |      
     |      First is the index of the first character to delete,
     |      and last is the index of the character just after
     |      the last one to delete. If last isn't specified it
     |      defaults to first+1, i.e. a single character is
     |      deleted.  This command returns an empty string.
     |  
     |  ggeett(self)
     |      Returns the spinbox's string
     |  
     |  iiccuurrssoorr(self, index)
     |      Alter the position of the insertion cursor.
     |      
     |      The insertion cursor will be displayed just before
     |      the character given by index. Returns an empty string
     |  
     |  iiddeennttiiffyy(self, x, y)
     |      Returns the name of the widget at position x, y
     |      
     |      Return value is one of: none, buttondown, buttonup, entry
     |  
     |  iinnddeexx(self, index)
     |      Returns the numerical index corresponding to index
     |  
     |  iinnsseerrtt(self, index, s)
     |      Insert string s at index
     |      
     |      Returns an empty string.
     |  
     |  iinnvvookkee(self, element)
     |      Causes the specified element to be invoked
     |      
     |      The element could be buttondown or buttonup
     |      triggering the action associated with it.
     |  
     |  ssccaann(self, *args)
     |      Internal function.
     |  
     |  ssccaann__ddrraaggttoo(self, x)
     |      Compute the difference between the given x argument
     |      and the x argument to the last scan mark command
     |      
     |      It then adjusts the view left or right by 10 times the
     |      difference in x-coordinates. This command is typically
     |      associated with mouse motion events in the widget, to
     |      produce the effect of dragging the spinbox at high speed
     |      through the window. The return value is an empty string.
     |  
     |  ssccaann__mmaarrkk(self, x)
     |      Records x and the current view in the spinbox window;
     |      
     |      used in conjunction with later scan dragto commands.
     |      Typically this command is associated with a mouse button
     |      press in the widget. It returns an empty string.
     |  
     |  sseelleeccttiioonn(self, *args)
     |      Internal function.
     |  
     |  sseelleeccttiioonn__aaddjjuusstt(self, index)
     |      Locate the end of the selection nearest to the character
     |      given by index,
     |      
     |      Then adjust that end of the selection to be at index
     |      (i.e including but not going beyond index). The other
     |      end of the selection is made the anchor point for future
     |      select to commands. If the selection isn't currently in
     |      the spinbox, then a new selection is created to include
     |      the characters between index and the most recent selection
     |      anchor point, inclusive. Returns an empty string.
     |  
     |  sseelleeccttiioonn__cclleeaarr(self)
     |      Clear the selection
     |      
     |      If the selection isn't in this widget then the
     |      command has no effect. Returns an empty string.
     |  
     |  sseelleeccttiioonn__eelleemmeenntt(self, element=None)
     |      Sets or gets the currently selected element.
     |      
     |      If a spinbutton element is specified, it will be
     |      displayed depressed
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  xxvviieeww(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xxvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xxvviieeww__ssccrroollll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
    
    class SSttrriinnggVVaarr(Variable)
     |  Value holder for strings variables.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, value=None, name=None)
     |      Construct a string variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to "")
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  ggeett(self)
     |      Return value of variable as string.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ____ddeell____(self)
     |      Unset the variable in Tcl.
     |  
     |  ____eeqq____(self, other)
     |      Comparison for equality (==).
     |      
     |      Note: if the Variable's master matters to behavior
     |      also compare self._master == other._master
     |  
     |  ____ssttrr____(self)
     |      Return the name of the variable in Tcl.
     |  
     |  sseett(self, value)
     |      Set the variable to VALUE.
     |  
     |  ttrraaccee = trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvaarriiaabbllee(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  ttrraaccee__vvddeelleettee(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |  
     |  ttrraaccee__vviinnffoo(self)
     |      Return all trace callback information.
    
    class SSttuuddbbuuttttoonn(Button)
     |  Method resolution order:
     |      Studbutton
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Button:
     |  
     |  ffllaasshh(self)
     |      Flash the button.
     |      
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |  
     |  iinnvvookkee(self)
     |      Invoke the command associated with the button.
     |      
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |  
     |  ttkkBBuuttttoonnDDoowwnn(self, *dummy)
     |  
     |  ttkkBBuuttttoonnEEnntteerr(self, *dummy)
     |  
     |  ttkkBBuuttttoonnIInnvvookkee(self, *dummy)
     |  
     |  ttkkBBuuttttoonnLLeeaavvee(self, *dummy)
     |  
     |  ttkkBBuuttttoonnUUpp(self, *dummy)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
    
    class TTeexxtt(Widget, XView, YView)
     |  Text widget which can display text in various forms.
     |  
     |  Method resolution order:
     |      Text
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a text widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          background, borderwidth, cursor,
     |          exportselection, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, insertbackground,
     |          insertborderwidth, insertofftime,
     |          insertontime, insertwidth, padx, pady,
     |          relief, selectbackground,
     |          selectborderwidth, selectforeground,
     |          setgrid, takefocus,
     |          xscrollcommand, yscrollcommand,
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          autoseparators, height, maxundo,
     |          spacing1, spacing2, spacing3,
     |          state, tabs, undo, width, wrap,
     |  
     |  bbbbooxx(self, *args)
     |      Return a tuple of (x,y,width,height) which gives the bounding
     |      box of the visible part of the character at the index in ARGS.
     |  
     |  ccoommppaarree(self, index1, op, index2)
     |      Return whether between index INDEX1 and index INDEX2 the
     |      relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.
     |  
     |  ddeebbuugg(self, boolean=None)
     |      Turn on the internal consistency checks of the B-Tree inside the text
     |      widget according to BOOLEAN.
     |  
     |  ddeelleettee(self, index1, index2=None)
     |      Delete the characters between INDEX1 and INDEX2 (not included).
     |  
     |  ddlliinneeiinnffoo(self, index)
     |      Return tuple (x,y,width,height,baseline) giving the bounding box
     |      and baseline position of the visible part of the line containing
     |      the character at INDEX.
     |  
     |  dduummpp(self, index1, index2=None, command=None, **kw)
     |      Return the contents of the widget between index1 and index2.
     |      
     |      The type of contents returned in filtered based on the keyword
     |      parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are
     |      given and true, then the corresponding items are returned. The result
     |      is a list of triples of the form (key, value, index). If none of the
     |      keywords are true then 'all' is used by default.
     |      
     |      If the 'command' argument is given, it is called once for each element
     |      of the list of triples, with the values of each triple serving as the
     |      arguments to the function. In this case the list is not returned.
     |  
     |  eeddiitt(self, *args)
     |      Internal method
     |      
     |      This method controls the undo mechanism and
     |      the modified flag. The exact behavior of the
     |      command depends on the option argument that
     |      follows the edit argument. The following forms
     |      of the command are currently supported:
     |      
     |      edit_modified, edit_redo, edit_reset, edit_separator
     |      and edit_undo
     |  
     |  eeddiitt__mmooddiiffiieedd(self, arg=None)
     |      Get or Set the modified flag
     |      
     |      If arg is not specified, returns the modified
     |      flag of the widget. The insert, delete, edit undo and
     |      edit redo commands or the user can set or clear the
     |      modified flag. If boolean is specified, sets the
     |      modified flag of the widget to arg.
     |  
     |  eeddiitt__rreeddoo(self)
     |      Redo the last undone edit
     |      
     |      When the undo option is true, reapplies the last
     |      undone edits provided no other edits were done since
     |      then. Generates an error when the redo stack is empty.
     |      Does nothing when the undo option is false.
     |  
     |  eeddiitt__rreesseett(self)
     |      Clears the undo and redo stacks
     |  
     |  eeddiitt__sseeppaarraattoorr(self)
     |      Inserts a separator (boundary) on the undo stack.
     |      
     |      Does nothing when the undo option is false
     |  
     |  eeddiitt__uunnddoo(self)
     |      Undoes the last edit action
     |      
     |      If the undo option is true. An edit action is defined
     |      as all the insert and delete commands that are recorded
     |      on the undo stack in between two separators. Generates
     |      an error when the undo stack is empty. Does nothing
     |      when the undo option is false
     |  
     |  ggeett(self, index1, index2=None)
     |      Return the text from INDEX1 to INDEX2 (not included).
     |  
     |  iimmaaggee__ccggeett(self, index, option)
     |      Return the value of OPTION of an embedded image at INDEX.
     |  
     |  iimmaaggee__ccoonnffiigguurree(self, index, cnf=None, **kw)
     |      Configure an embedded image at INDEX.
     |  
     |  iimmaaggee__ccrreeaattee(self, index, cnf={}, **kw)
     |      Create an embedded image at INDEX.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return all names of embedded images in this widget.
     |  
     |  iinnddeexx(self, index)
     |      Return the index in the form line.char for INDEX.
     |  
     |  iinnsseerrtt(self, index, chars, *args)
     |      Insert CHARS before the characters at INDEX. An additional
     |      tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.
     |  
     |  mmaarrkk__ggrraavviittyy(self, markName, direction=None)
     |      Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).
     |      Return the current value if None is given for DIRECTION.
     |  
     |  mmaarrkk__nnaammeess(self)
     |      Return all mark names.
     |  
     |  mmaarrkk__nneexxtt(self, index)
     |      Return the name of the next mark after INDEX.
     |  
     |  mmaarrkk__pprreevviioouuss(self, index)
     |      Return the name of the previous mark before INDEX.
     |  
     |  mmaarrkk__sseett(self, markName, index)
     |      Set mark MARKNAME before the character at INDEX.
     |  
     |  mmaarrkk__uunnsseett(self, *markNames)
     |      Delete all marks in MARKNAMES.
     |  
     |  ssccaann__ddrraaggttoo(self, x, y)
     |      Adjust the view of the text to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  ssccaann__mmaarrkk(self, x, y)
     |      Remember the current X, Y coordinates.
     |  
     |  sseeaarrcchh(self, pattern, index, stopindex=None, forwards=None, backwards=None, exact=None, regexp=None, nocase=None, count=None, elide=None)
     |      Search PATTERN beginning from INDEX until STOPINDEX.
     |      Return the index of the first character of a match or an
     |      empty string.
     |  
     |  sseeee(self, index)
     |      Scroll such that the character at INDEX is visible.
     |  
     |  ttaagg__aadddd(self, tagName, index1, *args)
     |      Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.
     |      Additional pairs of indices may follow in ARGS.
     |  
     |  ttaagg__bbiinndd(self, tagName, sequence, func, add=None)
     |      Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |  
     |  ttaagg__ccggeett(self, tagName, option)
     |      Return the value of OPTION for tag TAGNAME.
     |  
     |  ttaagg__ccoonnffiigg = tag_configure(self, tagName, cnf=None, **kw)
     |  
     |  ttaagg__ccoonnffiigguurree(self, tagName, cnf=None, **kw)
     |      Configure a tag TAGNAME.
     |  
     |  ttaagg__ddeelleettee(self, *tagNames)
     |      Delete all tags in TAGNAMES.
     |  
     |  ttaagg__lloowweerr(self, tagName, belowThis=None)
     |      Change the priority of tag TAGNAME such that it is lower
     |      than the priority of BELOWTHIS.
     |  
     |  ttaagg__nnaammeess(self, index=None)
     |      Return a list of all tag names.
     |  
     |  ttaagg__nneexxttrraannggee(self, tagName, index1, index2=None)
     |      Return a list of start and end index for the first sequence of
     |      characters between INDEX1 and INDEX2 which all have tag TAGNAME.
     |      The text is searched forward from INDEX1.
     |  
     |  ttaagg__pprreevvrraannggee(self, tagName, index1, index2=None)
     |      Return a list of start and end index for the first sequence of
     |      characters between INDEX1 and INDEX2 which all have tag TAGNAME.
     |      The text is searched backwards from INDEX1.
     |  
     |  ttaagg__rraaiissee(self, tagName, aboveThis=None)
     |      Change the priority of tag TAGNAME such that it is higher
     |      than the priority of ABOVETHIS.
     |  
     |  ttaagg__rraannggeess(self, tagName)
     |      Return a list of ranges of text which have tag TAGNAME.
     |  
     |  ttaagg__rreemmoovvee(self, tagName, index1, index2=None)
     |      Remove tag TAGNAME from all characters between INDEX1 and INDEX2.
     |  
     |  ttaagg__uunnbbiinndd(self, tagName, sequence, funcid=None)
     |      Unbind for all characters with TAGNAME for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  ttkk__tteexxttBBaacckkssppaaccee(self)
     |  
     |  ttkk__tteexxttIInnddeexxCClloosseerr(self, a, b, c)
     |  
     |  ttkk__tteexxttRReesseettAAnncchhoorr(self, index)
     |  
     |  ttkk__tteexxttSSeelleeccttTToo(self, index)
     |  
     |  wwiinnddooww__ccggeett(self, index, option)
     |      Return the value of OPTION of an embedded window at INDEX.
     |  
     |  wwiinnddooww__ccoonnffiigg = window_configure(self, index, cnf=None, **kw)
     |  
     |  wwiinnddooww__ccoonnffiigguurree(self, index, cnf=None, **kw)
     |      Configure an embedded window at INDEX.
     |  
     |  wwiinnddooww__ccrreeaattee(self, index, cnf={}, **kw)
     |      Create a window at INDEX.
     |  
     |  wwiinnddooww__nnaammeess(self)
     |      Return all names of embedded windows in this widget.
     |  
     |  yyvviieeww__ppiicckkppllaaccee(self, *what)
     |      Obsolete function, use see.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  xxvviieeww(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xxvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xxvviieeww__ssccrroollll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |  
     |  yyvviieeww(self, *args)
     |      Query and change the vertical position of the view.
     |  
     |  yyvviieeww__mmoovveettoo(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |  
     |  yyvviieeww__ssccrroollll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).
    
    class TTkk(Misc, Wm)
     |  Toplevel widget of Tk which represents mostly the main window
     |  of an application. It has an associated Tcl interpreter.
     |  
     |  Method resolution order:
     |      Tk
     |      Misc
     |      Wm
     |  
     |  Methods defined here:
     |  
     |  ____ggeettaattttrr____(self, attr)
     |      Delegate attribute access to the interpreter object
     |  
     |  ____iinniitt____(self, screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None)
     |      Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will
     |      be created. BASENAME will be used for the identification of the profile file (see
     |      readprofile).
     |      It is constructed from sys.argv[0] without extensions if None is given. CLASSNAME
     |      is the name of the widget class.
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets. This will
     |      end the application of this Tcl interpreter.
     |  
     |  llooaaddttkk(self)
     |  
     |  rreeaaddpprrooffiillee(self, baseName, className)
     |      Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into
     |      the Tcl Interpreter and calls execfile on BASENAME.py and CLASSNAME.py if
     |      such a file exists in the home directory.
     |  
     |  rreeppoorrtt__ccaallllbbaacckk__eexxcceeppttiioonn(self, exc, val, tb)
     |      Internal function. It reports exception on sys.stderr.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Wm:
     |  
     |  aassppeecctt = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |  
     |  aattttrriibbuutteess = wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |      
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |      
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |      
     |      On Macintosh, XXXXX
     |      
     |      On Unix, there are currently no special attribute values.
     |  
     |  cclliieenntt = wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |  
     |  ccoolloorrmmaappwwiinnddoowwss = wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |  
     |  ccoommmmaanndd = wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |  
     |  ddeeiiccoonniiffyy = wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |  
     |  ffooccuussmmooddeell = wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |  
     |  ffrraammee = wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |  
     |  ggeeoommeettrryy = wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |  
     |  ggrriidd = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |  
     |  ggrroouupp = wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |  
     |  iiccoonnbbiittmmaapp = wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |      
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendents that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |  
     |  iiccoonniiffyy = wm_iconify(self)
     |      Display widget as icon.
     |  
     |  iiccoonnmmaasskk = wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |  
     |  iiccoonnnnaammee = wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |  
     |  iiccoonnppoossiittiioonn = wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |  
     |  iiccoonnwwiinnddooww = wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |  
     |  mmaaxxssiizzee = wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  mmiinnssiizzee = wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  oovveerrrriiddeerreeddiirreecctt = wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |  
     |  ppoossiittiioonnffrroomm = wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  pprroottooccooll = wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |  
     |  rreessiizzaabbllee = wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |  
     |  ssiizzeeffrroomm = wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  ssttaattee = wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |  
     |  ttiittllee = wm_title(self, string=None)
     |      Set the title of this widget.
     |  
     |  ttrraannssiieenntt = wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |  
     |  wwiitthhddrraaww = wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
     |  
     |  wwmm__aassppeecctt(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |  
     |  wwmm__aattttrriibbuutteess(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |      
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |      
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |      
     |      On Macintosh, XXXXX
     |      
     |      On Unix, there are currently no special attribute values.
     |  
     |  wwmm__cclliieenntt(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |  
     |  wwmm__ccoolloorrmmaappwwiinnddoowwss(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |  
     |  wwmm__ccoommmmaanndd(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |  
     |  wwmm__ddeeiiccoonniiffyy(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |  
     |  wwmm__ffooccuussmmooddeell(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |  
     |  wwmm__ffrraammee(self)
     |      Return identifier for decorative frame of this widget if present.
     |  
     |  wwmm__ggeeoommeettrryy(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |  
     |  wwmm__ggrriidd(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |  
     |  wwmm__ggrroouupp(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |  
     |  wwmm__iiccoonnbbiittmmaapp(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |      
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendents that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |  
     |  wwmm__iiccoonniiffyy(self)
     |      Display widget as icon.
     |  
     |  wwmm__iiccoonnmmaasskk(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |  
     |  wwmm__iiccoonnnnaammee(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |  
     |  wwmm__iiccoonnppoossiittiioonn(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |  
     |  wwmm__iiccoonnwwiinnddooww(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |  
     |  wwmm__mmaaxxssiizzee(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wwmm__mmiinnssiizzee(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wwmm__oovveerrrriiddeerreeddiirreecctt(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |  
     |  wwmm__ppoossiittiioonnffrroomm(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wwmm__pprroottooccooll(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |  
     |  wwmm__rreessiizzaabbllee(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |  
     |  wwmm__ssiizzeeffrroomm(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wwmm__ssttaattee(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |  
     |  wwmm__ttiittllee(self, string=None)
     |      Set the title of this widget.
     |  
     |  wwmm__ttrraannssiieenntt(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |  
     |  wwmm__wwiitthhddrraaww(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
    
    class TToopplleevveell(BaseWidget, Wm)
     |  Toplevel widget, e.g. for dialogs.
     |  
     |  Method resolution order:
     |      Toplevel
     |      BaseWidget
     |      Misc
     |      Wm
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |      Construct a toplevel widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, class,
     |      colormap, container, cursor, height, highlightbackground,
     |      highlightcolor, highlightthickness, menu, relief, screen, takefocus,
     |      use, visual, width.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Wm:
     |  
     |  aassppeecctt = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |  
     |  aattttrriibbuutteess = wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |      
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |      
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |      
     |      On Macintosh, XXXXX
     |      
     |      On Unix, there are currently no special attribute values.
     |  
     |  cclliieenntt = wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |  
     |  ccoolloorrmmaappwwiinnddoowwss = wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |  
     |  ccoommmmaanndd = wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |  
     |  ddeeiiccoonniiffyy = wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |  
     |  ffooccuussmmooddeell = wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |  
     |  ffrraammee = wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |  
     |  ggeeoommeettrryy = wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |  
     |  ggrriidd = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |  
     |  ggrroouupp = wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |  
     |  iiccoonnbbiittmmaapp = wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |      
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendents that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |  
     |  iiccoonniiffyy = wm_iconify(self)
     |      Display widget as icon.
     |  
     |  iiccoonnmmaasskk = wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |  
     |  iiccoonnnnaammee = wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |  
     |  iiccoonnppoossiittiioonn = wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |  
     |  iiccoonnwwiinnddooww = wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |  
     |  mmaaxxssiizzee = wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  mmiinnssiizzee = wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  oovveerrrriiddeerreeddiirreecctt = wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |  
     |  ppoossiittiioonnffrroomm = wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  pprroottooccooll = wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |  
     |  rreessiizzaabbllee = wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |  
     |  ssiizzeeffrroomm = wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  ssttaattee = wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |  
     |  ttiittllee = wm_title(self, string=None)
     |      Set the title of this widget.
     |  
     |  ttrraannssiieenntt = wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |  
     |  wwiitthhddrraaww = wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
     |  
     |  wwmm__aassppeecctt(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |  
     |  wwmm__aattttrriibbuutteess(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |      
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |      
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |      
     |      On Macintosh, XXXXX
     |      
     |      On Unix, there are currently no special attribute values.
     |  
     |  wwmm__cclliieenntt(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |  
     |  wwmm__ccoolloorrmmaappwwiinnddoowwss(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |  
     |  wwmm__ccoommmmaanndd(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |  
     |  wwmm__ddeeiiccoonniiffyy(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |  
     |  wwmm__ffooccuussmmooddeell(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |  
     |  wwmm__ffrraammee(self)
     |      Return identifier for decorative frame of this widget if present.
     |  
     |  wwmm__ggeeoommeettrryy(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |  
     |  wwmm__ggrriidd(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |  
     |  wwmm__ggrroouupp(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |  
     |  wwmm__iiccoonnbbiittmmaapp(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |      
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendents that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |  
     |  wwmm__iiccoonniiffyy(self)
     |      Display widget as icon.
     |  
     |  wwmm__iiccoonnmmaasskk(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |  
     |  wwmm__iiccoonnnnaammee(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |  
     |  wwmm__iiccoonnppoossiittiioonn(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |  
     |  wwmm__iiccoonnwwiinnddooww(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |  
     |  wwmm__mmaaxxssiizzee(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wwmm__mmiinnssiizzee(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wwmm__oovveerrrriiddeerreeddiirreecctt(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |  
     |  wwmm__ppoossiittiioonnffrroomm(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wwmm__pprroottooccooll(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |  
     |  wwmm__rreessiizzaabbllee(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |  
     |  wwmm__ssiizzeeffrroomm(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wwmm__ssttaattee(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |  
     |  wwmm__ttiittllee(self, string=None)
     |      Set the title of this widget.
     |  
     |  wwmm__ttrraannssiieenntt(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |  
     |  wwmm__wwiitthhddrraaww(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
    
    class TTrriibbuuttttoonn(Button)
     |  Method resolution order:
     |      Tributton
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Button:
     |  
     |  ffllaasshh(self)
     |      Flash the button.
     |      
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |  
     |  iinnvvookkee(self)
     |      Invoke the command associated with the button.
     |      
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |  
     |  ttkkBBuuttttoonnDDoowwnn(self, *dummy)
     |  
     |  ttkkBBuuttttoonnEEnntteerr(self, *dummy)
     |  
     |  ttkkBBuuttttoonnIInnvvookkee(self, *dummy)
     |  
     |  ttkkBBuuttttoonnLLeeaavvee(self, *dummy)
     |  
     |  ttkkBBuuttttoonnUUpp(self, *dummy)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A k